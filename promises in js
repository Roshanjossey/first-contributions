The best way to handle asynchronous code is by promises.
A promise can only succeed or fail once. It cannot succeed or fail twice, neither can it switch from success to failure or vice versa.
If a promise has succeeded or failed and you later add a success/failure callback, the correct callback will be called, even though the event took place
earlier.
This is extremely useful for async success/failure, because you're less interested in the exact time something became available, 
and more interested in reacting to the outcome.

syntax for promises:

 var promise = new Promise(function(resolve, reject) {
      // do a thing, possibly async, thenâ€¦

         if (/* everything turned out fine */) {
        resolve("Stuff worked!");
          }
       else {
         reject(Error("It broke"));
       }
        }); 
        
